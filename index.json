{
  "api/RailSharp.Option.html": {
    "href": "api/RailSharp.Option.html",
    "title": "Class Option | Docs",
    "keywords": "Class Option Provides factory methods to create options. Inheritance System.Object Option Namespace : RailSharp Assembly : RailSharp.dll Syntax public static class Option : object Properties | Improve this Doc View Source None An option containing no value. Declaration public static None None { get; } Property Value Type Description RailSharp.Internal.Option.None Methods | Improve this Doc View Source From<T>(T) Creates an option containing a value; if value is null, returns None . Declaration public static Option<T> From<T>(T value) Parameters Type Name Description T value The value that will be contained by the option. Returns Type Description Option <T> The created option. Type Parameters Name Description T The type of the optional value. | Improve this Doc View Source Some<T>(T) Creates an option containing a value; if value is null, throws . Declaration public static Option<T> Some<T>(T value) Parameters Type Name Description T value The value that will be contained by the option. Returns Type Description Option <T> The created option. Type Parameters Name Description T The type of the optional value."
  },
  "api/RailSharp.Result-1.html": {
    "href": "api/RailSharp.Result-1.html",
    "title": "Class Result<TFailure> | Docs",
    "keywords": "Class Result<TFailure> Inheritance System.Object Result<TFailure> Namespace : RailSharp Assembly : RailSharp.dll Syntax public abstract class Result<TFailure> : object Type Parameters Name Description TFailure Operators | Improve this Doc View Source Implicit(TFailure to Result<TFailure>) Declaration public static implicit operator Result<TFailure>(TFailure failure) Parameters Type Name Description TFailure failure Returns Type Description Result <TFailure> | Improve this Doc View Source Implicit(VoidSuccess to Result<TFailure>) Declaration public static implicit operator Result<TFailure>(VoidSuccess success) Parameters Type Name Description RailSharp.Internal.Result.VoidSuccess success Returns Type Description Result <TFailure> Extension Methods OptionAdapters.When<T>(T, Func<T, Boolean>) ResultExtensions.Map<TFailure, TSuccess>(Result<TFailure>, Func<TSuccess>)"
  },
  "api/RailSharp.html": {
    "href": "api/RailSharp.html",
    "title": "Namespace RailSharp | Docs",
    "keywords": "Namespace RailSharp Classes Option Provides factory methods to create options. Option<T> Represents a value that may or may not be present. OptionAdapters Provides extension methods to some commonly used types that take or return an Option<T> . OptionExtensions Result Result<TFailure> Result<TFailure, TSuccess> ResultExtensions"
  },
  "index.html": {
    "href": "index.html",
    "title": "RailSharp | Docs",
    "keywords": "RailSharp A small railway oriented library that offers a simple implementation of the Option type and Result type in C#. <!-- <p align=\"center\"> <b>Quick links:</b> <span><a href=\"https://softframe.github.io/railsharp/articles/getting-started.html\">Getting Started</a>,</span> <span class=\"hidden\"><a href=\"https://softframe.github.io/railsharp\">Docs</a>,</span> <span><a href=\"https://softframe.github.io/railsharp/api/railsharp.html\">API</a></span> </p> --> What is RailSharp? RailSharp uses railway oriented programming to help handle errors and to deal with our old friend NullReferenceException . To learn more about railway oriented programming, take a look here ! <!-- # How do I get started? --> How do I install it? First, install NuGet . Then, install the NuGet package avalaible at nuget.org using the dotnet CLI: dotnet add package RailSharp I have an issue... First, you can check if your issue has already been tracked here . Otherwise, you can check if it's already fixed by pulling the develop branch , building the solution and then using the generated DLL files direcly in your project. If you still hit a problem, please document it and post it here . Credits The original code has been inspired from the Pluralsight course Making Your C# Code More Functional by Zoran Horvat . License RailSharp is Copyright Â© 2018 SoftFrame under the MIT license . <!-- Resources: -->"
  },
  "articles/getting-started.html": {
    "href": "articles/getting-started.html",
    "title": "Getting Started | Docs",
    "keywords": "Getting Started TODO: Add content here."
  },
  "api/RailSharp.Result.html": {
    "href": "api/RailSharp.Result.html",
    "title": "Class Result | Docs",
    "keywords": "Class Result Inheritance System.Object Result Namespace : RailSharp Assembly : RailSharp.dll Syntax public static class Result : object Methods | Improve this Doc View Source Failure<T>(T) Declaration public static Failure<T> Failure<T>(T value) Parameters Type Name Description T value Returns Type Description RailSharp.Internal.Result.Failure <T> Type Parameters Name Description T | Improve this Doc View Source Success() Declaration public static VoidSuccess Success() Returns Type Description RailSharp.Internal.Result.VoidSuccess | Improve this Doc View Source Success<T>(T) Declaration public static Success<T> Success<T>(T value) Parameters Type Name Description T value Returns Type Description RailSharp.Internal.Result.Success <T> Type Parameters Name Description T"
  },
  "api/RailSharp.OptionExtensions.html": {
    "href": "api/RailSharp.OptionExtensions.html",
    "title": "Class OptionExtensions | Docs",
    "keywords": "Class OptionExtensions Inheritance System.Object OptionExtensions Namespace : RailSharp Assembly : RailSharp.dll Syntax public static class OptionExtensions : object Methods | Improve this Doc View Source Do<T>(Option<T>, Action<T>) Declaration public static Option<T> Do<T>(this Option<T> option, Action<T> action) Parameters Type Name Description Option <T> option Action <T> action Returns Type Description Option <T> Type Parameters Name Description T | Improve this Doc View Source Map<T, TResult>(Option<T>, Func<T, TResult>) Declaration public static Option<TResult> Map<T, TResult>(this Option<T> option, Func<T, TResult> mapper) Parameters Type Name Description Option <T> option Func <T, TResult> mapper Returns Type Description Option <TResult> Type Parameters Name Description T TResult | Improve this Doc View Source Reduce<T>(Option<T>, T) Declaration public static T Reduce<T>(this Option<T> option, T defaultValue) Parameters Type Name Description Option <T> option T defaultValue Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Reduce<T>(Option<T>, Func<T>) Declaration public static T Reduce<T>(this Option<T> option, Func<T> defaultValueFactory) Parameters Type Name Description Option <T> option Func <T> defaultValueFactory Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source When<T>(Option<T>, Func<T, Boolean>) Declaration public static Option<T> When<T>(this Option<T> option, Func<T, bool> predicate) Parameters Type Name Description Option <T> option Func <T, System.Boolean > predicate Returns Type Description Option <T> Type Parameters Name Description T"
  },
  "api/RailSharp.Option-1.html": {
    "href": "api/RailSharp.Option-1.html",
    "title": "Class Option<T> | Docs",
    "keywords": "Class Option<T> Represents a value that may or may not be present. Inheritance System.Object Option<T> Namespace : RailSharp Assembly : RailSharp.dll Syntax public abstract class Option<T> : object Type Parameters Name Description T The type of the optional value. Properties | Improve this Doc View Source None An option containing no value. Declaration public static Option<T> None { get; } Property Value Type Description Option <T> Operators | Improve this Doc View Source Implicit(T to Option<T>) Implicitly casts a value of any type into an option containing value . Declaration public static implicit operator Option<T>(T value) Parameters Type Name Description T value Returns Type Description Option <T> | Improve this Doc View Source Implicit(None to Option<T>) Implicitly casts an empty option into a generic option of the desired type. Declaration public static implicit operator Option<T>(None none) Parameters Type Name Description RailSharp.Internal.Option.None none Returns Type Description Option <T> Extension Methods OptionAdapters.When<T>(T, Func<T, Boolean>) OptionExtensions.Do<T>(Option<T>, Action<T>) OptionExtensions.Map<T, TResult>(Option<T>, Func<T, TResult>) OptionExtensions.Reduce<T>(Option<T>, T) OptionExtensions.Reduce<T>(Option<T>, Func<T>) OptionExtensions.When<T>(Option<T>, Func<T, Boolean>)"
  },
  "api/RailSharp.Result-2.html": {
    "href": "api/RailSharp.Result-2.html",
    "title": "Class Result<TFailure, TSuccess> | Docs",
    "keywords": "Class Result<TFailure, TSuccess> Inheritance System.Object Result<TFailure, TSuccess> Namespace : RailSharp Assembly : RailSharp.dll Syntax public abstract class Result<TFailure, TSuccess> : object Type Parameters Name Description TFailure TSuccess Methods | Improve this Doc View Source Catch<TCatch>(Func<TCatch, TSuccess>) Declaration public Result<TFailure, TSuccess> Catch<TCatch>(Func<TCatch, TSuccess> mapper) where TCatch : TFailure Parameters Type Name Description Func <TCatch, TSuccess> mapper Returns Type Description Result <TFailure, TSuccess> Type Parameters Name Description TCatch | Improve this Doc View Source Catch<TCatch>(Func<TCatch, Boolean>, Func<TCatch, TSuccess>) Catches a failure of type TCatch and maps it to a success if it matches the given predicate . Declaration public Result<TFailure, TSuccess> Catch<TCatch>(Func<TCatch, bool> predicate, Func<TCatch, TSuccess> mapper) where TCatch : TFailure Parameters Type Name Description Func <TCatch, System.Boolean > predicate Func <TCatch, TSuccess> mapper The mapping function to execute. Returns Type Description Result <TFailure, TSuccess> The mapped failure if the failure has been caugth or the original success if not. Type Parameters Name Description TCatch The type of failure to catch. Remarks This method is part of this class instead of being an extension method for the sake of syntactic sugar only. We do not want to provide TFailure and TSuccess when calling this method. Operators | Improve this Doc View Source Implicit(TFailure to Result<TFailure, TSuccess>) Declaration public static implicit operator Result<TFailure, TSuccess>(TFailure failure) Parameters Type Name Description TFailure failure Returns Type Description Result <TFailure, TSuccess> | Improve this Doc View Source Implicit(TSuccess to Result<TFailure, TSuccess>) Declaration public static implicit operator Result<TFailure, TSuccess>(TSuccess success) Parameters Type Name Description TSuccess success Returns Type Description Result <TFailure, TSuccess> | Improve this Doc View Source Implicit(Failure<TFailure> to Result<TFailure, TSuccess>) Declaration public static implicit operator Result<TFailure, TSuccess>(Failure<TFailure> failure) Parameters Type Name Description RailSharp.Internal.Result.Failure <TFailure> failure Returns Type Description Result <TFailure, TSuccess> | Improve this Doc View Source Implicit(Success<TSuccess> to Result<TFailure, TSuccess>) Declaration public static implicit operator Result<TFailure, TSuccess>(Success<TSuccess> success) Parameters Type Name Description RailSharp.Internal.Result.Success <TSuccess> success Returns Type Description Result <TFailure, TSuccess> Extension Methods OptionAdapters.When<T>(T, Func<T, Boolean>) ResultExtensions.Catch<TFailure, TSuccess>(Result<TFailure, TSuccess>, Func<TFailure, TSuccess>) ResultExtensions.Catch<TFailure, TSuccess>(Result<TFailure, TSuccess>, Func<TFailure, Boolean>, Func<TFailure, TSuccess>) ResultExtensions.Map<TFailure, TSuccess, TNewSuccess>(Result<TFailure, TSuccess>, Func<TSuccess, TNewSuccess>) ResultExtensions.ThrowIfFailure<TFailure, TSuccess>(Result<TFailure, TSuccess>, Func<TFailure, Exception>)"
  },
  "api/RailSharp.ResultExtensions.html": {
    "href": "api/RailSharp.ResultExtensions.html",
    "title": "Class ResultExtensions | Docs",
    "keywords": "Class ResultExtensions Inheritance System.Object ResultExtensions Namespace : RailSharp Assembly : RailSharp.dll Syntax public static class ResultExtensions : object Methods | Improve this Doc View Source Catch<TFailure, TSuccess>(Result<TFailure, TSuccess>, Func<TFailure, TSuccess>) Declaration public static TSuccess Catch<TFailure, TSuccess>(this Result<TFailure, TSuccess> result, Func<TFailure, TSuccess> mapper) Parameters Type Name Description Result <TFailure, TSuccess> result Func <TFailure, TSuccess> mapper Returns Type Description TSuccess Type Parameters Name Description TFailure TSuccess | Improve this Doc View Source Catch<TFailure, TSuccess>(Result<TFailure, TSuccess>, Func<TFailure, Boolean>, Func<TFailure, TSuccess>) Declaration public static Result<TFailure, TSuccess> Catch<TFailure, TSuccess>(this Result<TFailure, TSuccess> result, Func<TFailure, bool> predicate, Func<TFailure, TSuccess> mapper) Parameters Type Name Description Result <TFailure, TSuccess> result Func <TFailure, System.Boolean > predicate Func <TFailure, TSuccess> mapper Returns Type Description Result <TFailure, TSuccess> Type Parameters Name Description TFailure TSuccess | Improve this Doc View Source Map<TFailure, TSuccess>(Result<TFailure>, Func<TSuccess>) Declaration public static Result<TFailure, TSuccess> Map<TFailure, TSuccess>(this Result<TFailure> result, Func<TSuccess> factory) Parameters Type Name Description Result <TFailure> result Func <TSuccess> factory Returns Type Description Result <TFailure, TSuccess> Type Parameters Name Description TFailure TSuccess | Improve this Doc View Source Map<TFailure, TSuccess, TNewSuccess>(Result<TFailure, TSuccess>, Func<TSuccess, TNewSuccess>) Declaration public static Result<TFailure, TNewSuccess> Map<TFailure, TSuccess, TNewSuccess>(this Result<TFailure, TSuccess> result, Func<TSuccess, TNewSuccess> mapper) Parameters Type Name Description Result <TFailure, TSuccess> result Func <TSuccess, TNewSuccess> mapper Returns Type Description Result <TFailure, TNewSuccess> Type Parameters Name Description TFailure TSuccess TNewSuccess | Improve this Doc View Source ThrowIfFailure<TFailure, TSuccess>(Result<TFailure, TSuccess>) Declaration public static TSuccess ThrowIfFailure<TFailure, TSuccess>(this Result<TFailure, TSuccess> result) where TFailure : Exception Parameters Type Name Description Result <TFailure, TSuccess> result Returns Type Description TSuccess Type Parameters Name Description TFailure TSuccess | Improve this Doc View Source ThrowIfFailure<TFailure, TSuccess>(Result<TFailure, TSuccess>, Func<TFailure, Exception>) Declaration public static TSuccess ThrowIfFailure<TFailure, TSuccess>(this Result<TFailure, TSuccess> result, Func<TFailure, Exception> mapper) Parameters Type Name Description Result <TFailure, TSuccess> result Func <TFailure, Exception > mapper Returns Type Description TSuccess Type Parameters Name Description TFailure TSuccess"
  },
  "api/RailSharp.OptionAdapters.html": {
    "href": "api/RailSharp.OptionAdapters.html",
    "title": "Class OptionAdapters | Docs",
    "keywords": "Class OptionAdapters Provides extension methods to some commonly used types that take or return an Option<T> . Inheritance System.Object OptionAdapters Namespace : RailSharp Assembly : RailSharp.dll Syntax public static class OptionAdapters : object Methods | Improve this Doc View Source Flatten<T>(IEnumerable<Option<T>>) Filters the sequence of options to keep only the values contained by the options. All empty options are ignored. Declaration public static IEnumerable<T> Flatten<T>(this IEnumerable<Option<T>> sequence) Parameters Type Name Description IEnumerable < Option <T>> sequence The sequence of options. Returns Type Description IEnumerable <T> The filtered sequence of values. Type Parameters Name Description T The type of the optional values. | Improve this Doc View Source TryFirst<T>(IEnumerable<T>) Returns an option containing the first element of the sequence or an empty option if no such element is found. Declaration public static Option<T> TryFirst<T>(this IEnumerable<T> sequence) Parameters Type Name Description IEnumerable <T> sequence An to return an element from. Returns Type Description Option <T> An empty option if sequence is empty or an option containing the first element in sequence . Type Parameters Name Description T The type of the elements of sequence . | Improve this Doc View Source TryFirst<T>(IEnumerable<T>, Func<T, Boolean>) Returns an option containing the first element of the sequence that satisfies a condition or an empty option if no such element is found. Declaration public static Option<T> TryFirst<T>(this IEnumerable<T> sequence, Func<T, bool> predicate) Parameters Type Name Description IEnumerable <T> sequence An to return an element from. Func <T, System.Boolean > predicate A function to test each element for a condition. Returns Type Description Option <T> An empty option if sequence is empty or if no element passes the test specified by predicate ; otherwise, an option containing the first element in sequence that passes the test specified by predicate . Type Parameters Name Description T The type of the elements of sequence . Remarks This implementation was inspired by Microsoft's implementation of FirstOrDefault. We can't use FirstOrDefault direcly in this method because, when using a sequence of structs, we can't determine if the default value is the matching element or the actual default value. | Improve this Doc View Source TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey) Gets the value associated with the specified key or an empty option if the key is not found. Declaration public static Option<TValue> TryGetValue<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key) Parameters Type Name Description IDictionary <TKey, TValue> dictionary The dictionary to search in. TKey key The key whose value to get. Returns Type Description Option <TValue> An option with some value if the dictionary contains an element with the specified key; otherwise, an empty option. Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source TrySingle<T>(IEnumerable<T>) Returns an option containing the only element of the sequence or an empty option if no such element is found. Declaration public static Option<T> TrySingle<T>(this IEnumerable<T> sequence) Parameters Type Name Description IEnumerable <T> sequence An to return an element from. Returns Type Description Option <T> An empty option if sequence is empty or an option containing the only element in sequence . Type Parameters Name Description T The type of the elements of sequence . | Improve this Doc View Source TrySingle<T>(IEnumerable<T>, Func<T, Boolean>) Returns an option containing the only element of the sequence that satisfies a condition or an empty option if no such element is found. Declaration public static Option<T> TrySingle<T>(this IEnumerable<T> sequence, Func<T, bool> predicate) Parameters Type Name Description IEnumerable <T> sequence An to return an element from. Func <T, System.Boolean > predicate A function to test each element for a condition. Returns Type Description Option <T> An empty option if sequence is empty or if no element or many elements passes the test specified by predicate ; otherwise, an option containing the only element in sequence that passes the test specified by predicate . Type Parameters Name Description T The type of the elements of sequence . Remarks This implementation was inspired by Microsoft's implementation of SingleOrDefault. We can't use SingleOrDefault direcly in this method because, when using a sequence of structs, we can't determine if the default value is the matching element or the actual default value. | Improve this Doc View Source When<T>(T, Func<T, Boolean>) Returns an option containing value if it satisfies a condition or an empty option if not. Declaration public static Option<T> When<T>(this T value, Func<T, bool> predicate) Parameters Type Name Description T value The value to test against a condition. Func <T, System.Boolean > predicate A function to test the value. Returns Type Description Option <T> An empty option if value doesn't pass the test specified by predicate ; otherwise, an option containing value . Type Parameters Name Description T The type of the tested value."
  }
}