{
  "api/RailSharp.Result-2.html": {
    "href": "api/RailSharp.Result-2.html",
    "title": "Class Result<TFailure, TSuccess> | Docs",
    "keywords": "Class Result<TFailure, TSuccess> Represents a result that is either a failure or a non empty success. Inheritance System.Object Result<TFailure, TSuccess> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : RailSharp Assembly : RailSharp.dll Syntax public abstract class Result<TFailure, TSuccess> Type Parameters Name Description TFailure The type of the failure. TSuccess The type of the success. Methods | Improve this Doc View Source Catch<TCatch>(Func<TCatch, TSuccess>) Returns a mapped success if the result is a failure of type TCatch or the initial result if not. Declaration public Result<TFailure, TSuccess> Catch<TCatch>(Func<TCatch, TSuccess> mapper) where TCatch : TFailure Parameters Type Name Description System.Func <TCatch, TSuccess> mapper A mapping function to map the caught failure to a success. Returns Type Description Result <TFailure, TSuccess> The mapped success if the failure has been caugth or the initial result if not. Type Parameters Name Description TCatch The type of failure to catch. Remarks This method is part of this class instead of being an extension method for the sake of syntactic sugar only. We do not want to provide TFailure and TSuccess when calling this method. | Improve this Doc View Source Catch<TCatch>(Func<TCatch, Boolean>, Func<TCatch, TSuccess>) Returns a mapped success if the result is a failure of type TCatch and satisfied the predicate or the initial result if not. Declaration public Result<TFailure, TSuccess> Catch<TCatch>(Func<TCatch, bool> predicate, Func<TCatch, TSuccess> mapper) where TCatch : TFailure Parameters Type Name Description System.Func <TCatch, System.Boolean > predicate A filter function that dertermines if the failure shoud be caught. System.Func <TCatch, TSuccess> mapper A mapping function to map the caught failure to a success. Returns Type Description Result <TFailure, TSuccess> The mapped failure if the failure has been caugth or the initial success if not. Type Parameters Name Description TCatch The type of failure to catch. Remarks This method is part of this class instead of being an extension method for the sake of syntactic sugar only. We do not want to provide TFailure and TSuccess when calling this method. Operators | Improve this Doc View Source Implicit(TFailure to Result<TFailure, TSuccess>) Implicitly casts a failure of type to a result. Declaration public static implicit operator Result<TFailure, TSuccess>(TFailure failure) Parameters Type Name Description TFailure failure Returns Type Description Result <TFailure, TSuccess> | Improve this Doc View Source Implicit(TSuccess to Result<TFailure, TSuccess>) Implicitly casts a success of type to a result. Declaration public static implicit operator Result<TFailure, TSuccess>(TSuccess success) Parameters Type Name Description TSuccess success Returns Type Description Result <TFailure, TSuccess> | Improve this Doc View Source Implicit(Failure<TFailure> to Result<TFailure, TSuccess>) Implicitly casts a failure to a result. Declaration public static implicit operator Result<TFailure, TSuccess>(Failure<TFailure> failure) Parameters Type Name Description RailSharp.Internal.Result.Failure <TFailure> failure Returns Type Description Result <TFailure, TSuccess> | Improve this Doc View Source Implicit(Success<TSuccess> to Result<TFailure, TSuccess>) Implicitly casts a success to a result. Declaration public static implicit operator Result<TFailure, TSuccess>(Success<TSuccess> success) Parameters Type Name Description RailSharp.Internal.Result.Success <TSuccess> success Returns Type Description Result <TFailure, TSuccess> Extension Methods OptionAdapters.When<T>(T, Func<T, Boolean>) ResultExtensions.Catch<TFailure, TSuccess>(Result<TFailure, TSuccess>, Func<TFailure, TSuccess>) ResultExtensions.Catch<TFailure, TSuccess>(Result<TFailure, TSuccess>, Func<TFailure, Boolean>, Func<TFailure, TSuccess>) ResultExtensions.Map<TFailure, TSuccess, TNewSuccess>(Result<TFailure, TSuccess>, Func<TSuccess, TNewSuccess>) ResultExtensions.ThrowIfFailure<TFailure, TSuccess>(Result<TFailure, TSuccess>, Func<TFailure, Exception>)"
  },
  "api/RailSharp.OptionExtensions.html": {
    "href": "api/RailSharp.OptionExtensions.html",
    "title": "Class OptionExtensions | Docs",
    "keywords": "Class OptionExtensions Inheritance System.Object OptionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : RailSharp Assembly : RailSharp.dll Syntax public static class OptionExtensions Methods | Improve this Doc View Source Do<T>(Option<T>, Action<T>) Execute an action on the contained value only if option contains a value. Declaration public static Option<T> Do<T>(this Option<T> option, Action<T> action) Parameters Type Name Description Option <T> option The option to execute an action on. System.Action <T> action A action function to execute. Returns Type Description Option <T> The initial result. Type Parameters Name Description T The type of the optional value. | Improve this Doc View Source Map<T, TDestination>(Option<T>, Func<T, TDestination>) Returns a new option containing a mapped value if option contains a value or none if not. Declaration public static Option<TDestination> Map<T, TDestination>(this Option<T> option, Func<T, TDestination> mapper) Parameters Type Name Description Option <T> option The initial option. System.Func <T, TDestination> mapper A function to map the optional value to a new value. Returns Type Description Option <TDestination> A new option containing the mapped value or none. Type Parameters Name Description T The source type of the optional value. TDestination The destination type of the optional value. | Improve this Doc View Source Reduce<T>(Option<T>, T) Returns the contained value if option contains a value or a default value if not. Declaration public static T Reduce<T>(this Option<T> option, T defaultValue) Parameters Type Name Description Option <T> option The initial option. T defaultValue The default value to return when option is empty. Returns Type Description T The optional value or a default value. Type Parameters Name Description T The type of the optional value. | Improve this Doc View Source Reduce<T>(Option<T>, Func<T>) Returns the contained value if option contains a value or a default value if not. Declaration public static T Reduce<T>(this Option<T> option, Func<T> defaultValueFactory) Parameters Type Name Description Option <T> option The initial option. System.Func <T> defaultValueFactory A function to create the default value. Returns Type Description T The optional value or a default value. Type Parameters Name Description T The type of the optional value. | Improve this Doc View Source When<T>(Option<T>, Func<T, Boolean>) Returns none if option doesn't satisfy the given condition. Declaration public static Option<T> When<T>(this Option<T> option, Func<T, bool> predicate) Parameters Type Name Description Option <T> option The initial option. System.Func <T, System.Boolean > predicate A function to test the optional value. Returns Type Description Option <T> The initial option or none. Type Parameters Name Description T The type of the optional value."
  },
  "api/RailSharp.html": {
    "href": "api/RailSharp.html",
    "title": "Namespace RailSharp | Docs",
    "keywords": "Namespace RailSharp Classes Option Provides factory methods to create options. Option<T> Represents a value that may or may not be present. OptionAdapters Provides extension methods to some commonly used types that take or return an Option<T> . OptionExtensions Result Provides factory methods to create results. Result<TFailure> Represents a result that is either a failure or an empty success. Result<TFailure, TSuccess> Represents a result that is either a failure or a non empty success. ResultExtensions"
  },
  "api/RailSharp.Result.html": {
    "href": "api/RailSharp.Result.html",
    "title": "Class Result | Docs",
    "keywords": "Class Result Provides factory methods to create results. Inheritance System.Object Result Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : RailSharp Assembly : RailSharp.dll Syntax public static class Result Methods | Improve this Doc View Source Failure<T>(T) Creates an result which is a failure. Declaration public static Failure<T> Failure<T>(T value) Parameters Type Name Description T value The failure instance. Returns Type Description RailSharp.Internal.Result.Failure <T> The created result failure. Type Parameters Name Description T The type of the failure. | Improve this Doc View Source Success() Creates an result which is a success containing no success value. Declaration public static VoidSuccess Success() Returns Type Description RailSharp.Internal.Result.VoidSuccess The created result success. | Improve this Doc View Source Success<T>(T) Creates an result which is a success. Declaration public static Success<T> Success<T>(T value) Parameters Type Name Description T value The success instance. Returns Type Description RailSharp.Internal.Result.Success <T> The created result success. Type Parameters Name Description T The type of the success."
  },
  "api/RailSharp.OptionAdapters.html": {
    "href": "api/RailSharp.OptionAdapters.html",
    "title": "Class OptionAdapters | Docs",
    "keywords": "Class OptionAdapters Provides extension methods to some commonly used types that take or return an Option<T> . Inheritance System.Object OptionAdapters Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : RailSharp Assembly : RailSharp.dll Syntax public static class OptionAdapters Methods | Improve this Doc View Source Flatten<T>(IEnumerable<Option<T>>) Filters the sequence of options to keep only the values contained by the options. All empty options are ignored. Declaration public static IEnumerable<T> Flatten<T>(this IEnumerable<Option<T>> sequence) Parameters Type Name Description System.Collections.Generic.IEnumerable < Option <T>> sequence The sequence of options. Returns Type Description System.Collections.Generic.IEnumerable <T> The filtered sequence of values. Type Parameters Name Description T The type of the optional values. | Improve this Doc View Source TryFirst<T>(IEnumerable<T>) Returns an option containing the first element of the sequence or an empty option if no such element is found. Declaration public static Option<T> TryFirst<T>(this IEnumerable<T> sequence) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence An System.Collections.Generic.IEnumerable<T> to return an element from. Returns Type Description Option <T> An empty option if sequence is empty or an option containing the first element in sequence . Type Parameters Name Description T The type of the elements of sequence . | Improve this Doc View Source TryFirst<T>(IEnumerable<T>, Func<T, Boolean>) Returns an option containing the first element of the sequence that satisfies a condition or an empty option if no such element is found. Declaration public static Option<T> TryFirst<T>(this IEnumerable<T> sequence, Func<T, bool> predicate) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence An System.Collections.Generic.IEnumerable<T> to return an element from. System.Func <T, System.Boolean > predicate A function to test each element for a condition. Returns Type Description Option <T> An empty option if sequence is empty or if no element passes the test specified by predicate ; otherwise, an option containing the first element in sequence that passes the test specified by predicate . Type Parameters Name Description T The type of the elements of sequence . Remarks This implementation was inspired by Microsoft's implementation of FirstOrDefault. We can't use FirstOrDefault direcly in this method because, when using a sequence of structs, we can't determine if the default value is the matching element or the actual default value. | Improve this Doc View Source TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey) Gets the value associated with the specified key or an empty option if the key is not found. Declaration public static Option<TValue> TryGetValue<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary to search in. TKey key The key whose value to get. Returns Type Description Option <TValue> An option with some value if the dictionary contains an element with the specified key; otherwise, an empty option. Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source TrySingle<T>(IEnumerable<T>) Returns an option containing the only element of the sequence or an empty option if no such element is found. Declaration public static Option<T> TrySingle<T>(this IEnumerable<T> sequence) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence An System.Collections.Generic.IEnumerable<T> to return an element from. Returns Type Description Option <T> An empty option if sequence is empty or an option containing the only element in sequence . Type Parameters Name Description T The type of the elements of sequence . | Improve this Doc View Source TrySingle<T>(IEnumerable<T>, Func<T, Boolean>) Returns an option containing the only element of the sequence that satisfies a condition or an empty option if no such element is found. Declaration public static Option<T> TrySingle<T>(this IEnumerable<T> sequence, Func<T, bool> predicate) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence An System.Collections.Generic.IEnumerable<T> to return an element from. System.Func <T, System.Boolean > predicate A function to test each element for a condition. Returns Type Description Option <T> An empty option if sequence is empty or if no element or many elements passes the test specified by predicate ; otherwise, an option containing the only element in sequence that passes the test specified by predicate . Type Parameters Name Description T The type of the elements of sequence . Remarks This implementation was inspired by Microsoft's implementation of SingleOrDefault. We can't use SingleOrDefault direcly in this method because, when using a sequence of structs, we can't determine if the default value is the matching element or the actual default value. | Improve this Doc View Source When<T>(T, Func<T, Boolean>) Returns an option containing value if it satisfies a condition or an empty option if not. Declaration public static Option<T> When<T>(this T value, Func<T, bool> predicate) Parameters Type Name Description T value The value to test against a condition. System.Func <T, System.Boolean > predicate A function to test the value. Returns Type Description Option <T> An empty option if value doesn't pass the test specified by predicate ; otherwise, an option containing value . Type Parameters Name Description T The type of the tested value."
  },
  "articles/getting-started.html": {
    "href": "articles/getting-started.html",
    "title": "Getting Started | Docs",
    "keywords": "Getting Started TODO: Add content here."
  },
  "index.html": {
    "href": "index.html",
    "title": "RailSharp | Docs",
    "keywords": "RailSharp A small railway oriented library that offers a simple implementation of the Option type and Result type in C#. Quick links: <!-- <span><a href=\"https://softframe.github.io/railsharp/articles/getting-started.html\">Getting Started</a>,</span> --> Docs , API What is RailSharp? RailSharp uses railway oriented programming to help handle errors and to deal with our old friend NullReferenceException . To learn more about railway oriented programming, take a look here ! How do I get started? Here's a quick overview of how to use the Option and Result types: Option type: // First, instantiates an option using `Option.None`, `Option.Some(T)` // or one of the extension methods. var option = Option.Some(new User(\"Alan Turing\")); var userName = option // Then, handle the happy path (i.e. when the option contains a value). .Map(user => user.Name) .Do(name => SayHi(name)) // Finally, handle the sad path (i.e. when the option contains no value). .Reduce(() => \"Anonymous\") Result type: // First, instantiates a result using `Result.Failure(TFailure)`, // `Result.Success(TSuccess)` or one of the extension methods. var result = Result.Failure(new UserNotFound()); var httpResponse = result // Then, handle the happy path (i.e. when the result is a success). .Map(data => Ok(data)) // Finally, handle the sad paths (i.e. when the result is a failure). .Catch<UserNotFound>(err => NotFound()) .Catch(err => InternalServerError()) You can also take a look at the API documentation or even the unit tests for a deeper understanding. How do I install it? First, install NuGet . Then, install the NuGet package avalaible at nuget.org using the dotnet CLI: dotnet add package RailSharp I have an issue... First, you can check if your issue has already been tracked here . Otherwise, you can check if it's already fixed by pulling the develop branch , building the solution and then using the generated DLL files direcly in your project. If you still hit a problem, please document it and post it here . Credits The original code has been inspired from the Pluralsight course Making Your C# Code More Functional by Zoran Horvat . License RailSharp is Copyright © 2018 SoftFrame under the MIT license . <!-- Resources: -->"
  },
  "api/RailSharp.ResultExtensions.html": {
    "href": "api/RailSharp.ResultExtensions.html",
    "title": "Class ResultExtensions | Docs",
    "keywords": "Class ResultExtensions Inheritance System.Object ResultExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : RailSharp Assembly : RailSharp.dll Syntax public static class ResultExtensions Methods | Improve this Doc View Source Catch<TFailure, TSuccess>(Result<TFailure, TSuccess>, Func<TFailure, TSuccess>) Returns a mapped success if result is a failure or the initial result if not. Declaration public static TSuccess Catch<TFailure, TSuccess>(this Result<TFailure, TSuccess> result, Func<TFailure, TSuccess> mapper) Parameters Type Name Description Result <TFailure, TSuccess> result The initial result to catch a failure from. System.Func <TFailure, TSuccess> mapper A mapping function to map the caught failure to a success. Returns Type Description TSuccess The mapped success if the failure has been caugth or the initial result if not. Type Parameters Name Description TFailure The type of the failure. TSuccess The type of the success. | Improve this Doc View Source Catch<TFailure, TSuccess>(Result<TFailure, TSuccess>, Func<TFailure, Boolean>, Func<TFailure, TSuccess>) Returns a mapped success if result is a failure or the initial result if not. Declaration public static Result<TFailure, TSuccess> Catch<TFailure, TSuccess>(this Result<TFailure, TSuccess> result, Func<TFailure, bool> predicate, Func<TFailure, TSuccess> mapper) Parameters Type Name Description Result <TFailure, TSuccess> result The initial result to catch a failure from. System.Func <TFailure, System.Boolean > predicate A filter function that dertermines if the failure shoud be caught. System.Func <TFailure, TSuccess> mapper A mapping function to map the caught failure to a success. Returns Type Description Result <TFailure, TSuccess> The mapped success if the failure has been caugth or the initial result if not. Type Parameters Name Description TFailure The type of the failure. TSuccess The type of the success. | Improve this Doc View Source Map<TFailure, TSuccess>(Result<TFailure>, Func<TSuccess>) Returns a success containing a newly created value if result is an empty success or the initial failure if not. Declaration public static Result<TFailure, TSuccess> Map<TFailure, TSuccess>(this Result<TFailure> result, Func<TSuccess> factory) Parameters Type Name Description Result <TFailure> result The initial result. System.Func <TSuccess> factory A function to create the success value. Returns Type Description Result <TFailure, TSuccess> The mapped non empty success or the initial failure. Type Parameters Name Description TFailure The type of the failure. TSuccess The type of the success. | Improve this Doc View Source Map<TFailure, TSuccess, TNewSuccess>(Result<TFailure, TSuccess>, Func<TSuccess, TNewSuccess>) Returns a mapped success if result is an success or the initial failure if not. Declaration public static Result<TFailure, TNewSuccess> Map<TFailure, TSuccess, TNewSuccess>(this Result<TFailure, TSuccess> result, Func<TSuccess, TNewSuccess> mapper) Parameters Type Name Description Result <TFailure, TSuccess> result The initial result. System.Func <TSuccess, TNewSuccess> mapper A function to map the current success to a new success of type TNewSuccess . Returns Type Description Result <TFailure, TNewSuccess> The mapped success or the initial failure. Type Parameters Name Description TFailure The type of the failure. TSuccess The source type of the success. TNewSuccess The destination type of the initial success. | Improve this Doc View Source ThrowIfFailure<TFailure, TSuccess>(Result<TFailure, TSuccess>) Throws an exception if result is a failure or returns the success value if it's a success. Declaration public static TSuccess ThrowIfFailure<TFailure, TSuccess>(this Result<TFailure, TSuccess> result) where TFailure : Exception Parameters Type Name Description Result <TFailure, TSuccess> result The initial result. Returns Type Description TSuccess The success value if result is a success. Type Parameters Name Description TFailure The type of the failure. TSuccess The type of the success. | Improve this Doc View Source ThrowIfFailure<TFailure, TSuccess>(Result<TFailure, TSuccess>, Func<TFailure, Exception>) Throws an exception if result is a failure or returns the success value if it's a success. Declaration public static TSuccess ThrowIfFailure<TFailure, TSuccess>(this Result<TFailure, TSuccess> result, Func<TFailure, Exception> mapper) Parameters Type Name Description Result <TFailure, TSuccess> result The initial result. System.Func <TFailure, System.Exception > mapper A function to map the failure to an exception. Returns Type Description TSuccess The success value if result is a success. Type Parameters Name Description TFailure The type of the failure. TSuccess The type of the success."
  },
  "api/RailSharp.Option.html": {
    "href": "api/RailSharp.Option.html",
    "title": "Class Option | Docs",
    "keywords": "Class Option Provides factory methods to create options. Inheritance System.Object Option Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : RailSharp Assembly : RailSharp.dll Syntax public static class Option Properties | Improve this Doc View Source None An option containing no value. Declaration public static None None { get; } Property Value Type Description RailSharp.Internal.Option.None Methods | Improve this Doc View Source From<T>(T) Creates an option containing a value; if value is null, returns None . Declaration public static Option<T> From<T>(T value) Parameters Type Name Description T value The value that will be contained by the option. Returns Type Description Option <T> The created option. Type Parameters Name Description T The type of the optional value. | Improve this Doc View Source Some<T>(T) Creates an option containing a value; if value is null, throws System.ArgumentNullException . Declaration public static Option<T> Some<T>(T value) Parameters Type Name Description T value The value that will be contained by the option. Returns Type Description Option <T> The created option. Type Parameters Name Description T The type of the optional value. Exceptions Type Condition System.ArgumentNullException If value is null."
  },
  "api/RailSharp.Result-1.html": {
    "href": "api/RailSharp.Result-1.html",
    "title": "Class Result<TFailure> | Docs",
    "keywords": "Class Result<TFailure> Represents a result that is either a failure or an empty success. Inheritance System.Object Result<TFailure> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : RailSharp Assembly : RailSharp.dll Syntax public abstract class Result<TFailure> Type Parameters Name Description TFailure The type of the failure. Operators | Improve this Doc View Source Implicit(TFailure to Result<TFailure>) Implicitly casts a value of any type to a generic result failure of the given value type. Declaration public static implicit operator Result<TFailure>(TFailure value) Parameters Type Name Description TFailure value The failure to cast. Returns Type Description Result <TFailure> | Improve this Doc View Source Implicit(VoidSuccess to Result<TFailure>) Implicitly casts an empty success to a generic result of the desired failure type. Declaration public static implicit operator Result<TFailure>(VoidSuccess success) Parameters Type Name Description RailSharp.Internal.Result.VoidSuccess success The success to cast. Returns Type Description Result <TFailure> Extension Methods OptionAdapters.When<T>(T, Func<T, Boolean>) ResultExtensions.Map<TFailure, TSuccess>(Result<TFailure>, Func<TSuccess>)"
  },
  "api/RailSharp.Option-1.html": {
    "href": "api/RailSharp.Option-1.html",
    "title": "Class Option<T> | Docs",
    "keywords": "Class Option<T> Represents a value that may or may not be present. Inheritance System.Object Option<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : RailSharp Assembly : RailSharp.dll Syntax public abstract class Option<T> Type Parameters Name Description T The type of the optional value. Properties | Improve this Doc View Source None An option containing no value. Declaration public static Option<T> None { get; } Property Value Type Description Option <T> Operators | Improve this Doc View Source Implicit(T to Option<T>) Implicitly casts a value of any type to an option containing value . Declaration public static implicit operator Option<T>(T value) Parameters Type Name Description T value The value to cast. Returns Type Description Option <T> | Improve this Doc View Source Implicit(None to Option<T>) Implicitly casts an empty option to a generic option of the desired type. Declaration public static implicit operator Option<T>(None none) Parameters Type Name Description RailSharp.Internal.Option.None none The value to cast. Returns Type Description Option <T> Extension Methods OptionAdapters.When<T>(T, Func<T, Boolean>) OptionExtensions.Do<T>(Option<T>, Action<T>) OptionExtensions.Map<T, TDestination>(Option<T>, Func<T, TDestination>) OptionExtensions.Reduce<T>(Option<T>, T) OptionExtensions.Reduce<T>(Option<T>, Func<T>) OptionExtensions.When<T>(Option<T>, Func<T, Boolean>)"
  }
}